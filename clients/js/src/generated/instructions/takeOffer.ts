/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { ESCROW_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const TAKE_OFFER_DISCRIMINATOR = new Uint8Array([
  128, 156, 242, 207, 237, 192, 103, 240,
]);

export function getTakeOfferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TAKE_OFFER_DISCRIMINATOR);
}

export type TakeOfferInstruction<
  TProgram extends string = typeof ESCROW_PROGRAM_ADDRESS,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgramB extends string | AccountMeta<string> = string,
  TAccountTokenProgramA extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTaker extends string | AccountMeta<string> = string,
  TAccountMaker extends string | AccountMeta<string> = string,
  TAccountTokenMintA extends string | AccountMeta<string> = string,
  TAccountTokenMintB extends string | AccountMeta<string> = string,
  TAccountOffer extends string | AccountMeta<string> = string,
  TAccountTakerTokenAccountA extends string | AccountMeta<string> = string,
  TAccountTakerTokenAccountB extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountMakerTokenAccountB extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgramB extends string
        ? ReadonlyAccount<TAccountTokenProgramB>
        : TAccountTokenProgramB,
      TAccountTokenProgramA extends string
        ? ReadonlyAccount<TAccountTokenProgramA>
        : TAccountTokenProgramA,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTaker extends string
        ? WritableSignerAccount<TAccountTaker> &
            AccountSignerMeta<TAccountTaker>
        : TAccountTaker,
      TAccountMaker extends string
        ? WritableAccount<TAccountMaker>
        : TAccountMaker,
      TAccountTokenMintA extends string
        ? ReadonlyAccount<TAccountTokenMintA>
        : TAccountTokenMintA,
      TAccountTokenMintB extends string
        ? ReadonlyAccount<TAccountTokenMintB>
        : TAccountTokenMintB,
      TAccountOffer extends string
        ? WritableAccount<TAccountOffer>
        : TAccountOffer,
      TAccountTakerTokenAccountA extends string
        ? WritableAccount<TAccountTakerTokenAccountA>
        : TAccountTakerTokenAccountA,
      TAccountTakerTokenAccountB extends string
        ? WritableAccount<TAccountTakerTokenAccountB>
        : TAccountTakerTokenAccountB,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountMakerTokenAccountB extends string
        ? WritableAccount<TAccountMakerTokenAccountB>
        : TAccountMakerTokenAccountB,
      ...TRemainingAccounts,
    ]
  >;

export type TakeOfferInstructionData = { discriminator: ReadonlyUint8Array };

export type TakeOfferInstructionDataArgs = {};

export function getTakeOfferInstructionDataEncoder(): FixedSizeEncoder<TakeOfferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: TAKE_OFFER_DISCRIMINATOR })
  );
}

export function getTakeOfferInstructionDataDecoder(): FixedSizeDecoder<TakeOfferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getTakeOfferInstructionDataCodec(): FixedSizeCodec<
  TakeOfferInstructionDataArgs,
  TakeOfferInstructionData
> {
  return combineCodec(
    getTakeOfferInstructionDataEncoder(),
    getTakeOfferInstructionDataDecoder()
  );
}

export type TakeOfferAsyncInput<
  TAccountSystemProgram extends string = string,
  TAccountTokenProgramB extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTaker extends string = string,
  TAccountMaker extends string = string,
  TAccountTokenMintA extends string = string,
  TAccountTokenMintB extends string = string,
  TAccountOffer extends string = string,
  TAccountTakerTokenAccountA extends string = string,
  TAccountTakerTokenAccountB extends string = string,
  TAccountVault extends string = string,
  TAccountMakerTokenAccountB extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgramB: Address<TAccountTokenProgramB>;
  tokenProgramA: Address<TAccountTokenProgramA>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  taker: TransactionSigner<TAccountTaker>;
  maker: Address<TAccountMaker>;
  tokenMintA: Address<TAccountTokenMintA>;
  tokenMintB: Address<TAccountTokenMintB>;
  offer: Address<TAccountOffer>;
  takerTokenAccountA?: Address<TAccountTakerTokenAccountA>;
  takerTokenAccountB?: Address<TAccountTakerTokenAccountB>;
  vault?: Address<TAccountVault>;
  makerTokenAccountB?: Address<TAccountMakerTokenAccountB>;
};

export async function getTakeOfferInstructionAsync<
  TAccountSystemProgram extends string,
  TAccountTokenProgramB extends string,
  TAccountTokenProgramA extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTaker extends string,
  TAccountMaker extends string,
  TAccountTokenMintA extends string,
  TAccountTokenMintB extends string,
  TAccountOffer extends string,
  TAccountTakerTokenAccountA extends string,
  TAccountTakerTokenAccountB extends string,
  TAccountVault extends string,
  TAccountMakerTokenAccountB extends string,
  TProgramAddress extends Address = typeof ESCROW_PROGRAM_ADDRESS,
>(
  input: TakeOfferAsyncInput<
    TAccountSystemProgram,
    TAccountTokenProgramB,
    TAccountTokenProgramA,
    TAccountAssociatedTokenProgram,
    TAccountTaker,
    TAccountMaker,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountOffer,
    TAccountTakerTokenAccountA,
    TAccountTakerTokenAccountB,
    TAccountVault,
    TAccountMakerTokenAccountB
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  TakeOfferInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountTokenProgramB,
    TAccountTokenProgramA,
    TAccountAssociatedTokenProgram,
    TAccountTaker,
    TAccountMaker,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountOffer,
    TAccountTakerTokenAccountA,
    TAccountTakerTokenAccountB,
    TAccountVault,
    TAccountMakerTokenAccountB
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? ESCROW_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgramB: { value: input.tokenProgramB ?? null, isWritable: false },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    taker: { value: input.taker ?? null, isWritable: true },
    maker: { value: input.maker ?? null, isWritable: true },
    tokenMintA: { value: input.tokenMintA ?? null, isWritable: false },
    tokenMintB: { value: input.tokenMintB ?? null, isWritable: false },
    offer: { value: input.offer ?? null, isWritable: true },
    takerTokenAccountA: {
      value: input.takerTokenAccountA ?? null,
      isWritable: true,
    },
    takerTokenAccountB: {
      value: input.takerTokenAccountB ?? null,
      isWritable: true,
    },
    vault: { value: input.vault ?? null, isWritable: true },
    makerTokenAccountB: {
      value: input.makerTokenAccountB ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.takerTokenAccountA.value) {
    accounts.takerTokenAccountA.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.taker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgramA.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMintA.value)),
      ],
    });
  }
  if (!accounts.takerTokenAccountB.value) {
    accounts.takerTokenAccountB.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.taker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgramB.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMintB.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.offer.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgramA.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMintA.value)),
      ],
    });
  }
  if (!accounts.makerTokenAccountB.value) {
    accounts.makerTokenAccountB.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.maker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgramB.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMintB.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgramB),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.taker),
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.tokenMintA),
      getAccountMeta(accounts.tokenMintB),
      getAccountMeta(accounts.offer),
      getAccountMeta(accounts.takerTokenAccountA),
      getAccountMeta(accounts.takerTokenAccountB),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.makerTokenAccountB),
    ],
    programAddress,
    data: getTakeOfferInstructionDataEncoder().encode({}),
  } as TakeOfferInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountTokenProgramB,
    TAccountTokenProgramA,
    TAccountAssociatedTokenProgram,
    TAccountTaker,
    TAccountMaker,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountOffer,
    TAccountTakerTokenAccountA,
    TAccountTakerTokenAccountB,
    TAccountVault,
    TAccountMakerTokenAccountB
  >;

  return instruction;
}

export type TakeOfferInput<
  TAccountSystemProgram extends string = string,
  TAccountTokenProgramB extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTaker extends string = string,
  TAccountMaker extends string = string,
  TAccountTokenMintA extends string = string,
  TAccountTokenMintB extends string = string,
  TAccountOffer extends string = string,
  TAccountTakerTokenAccountA extends string = string,
  TAccountTakerTokenAccountB extends string = string,
  TAccountVault extends string = string,
  TAccountMakerTokenAccountB extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgramB: Address<TAccountTokenProgramB>;
  tokenProgramA: Address<TAccountTokenProgramA>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  taker: TransactionSigner<TAccountTaker>;
  maker: Address<TAccountMaker>;
  tokenMintA: Address<TAccountTokenMintA>;
  tokenMintB: Address<TAccountTokenMintB>;
  offer: Address<TAccountOffer>;
  takerTokenAccountA: Address<TAccountTakerTokenAccountA>;
  takerTokenAccountB: Address<TAccountTakerTokenAccountB>;
  vault: Address<TAccountVault>;
  makerTokenAccountB: Address<TAccountMakerTokenAccountB>;
};

export function getTakeOfferInstruction<
  TAccountSystemProgram extends string,
  TAccountTokenProgramB extends string,
  TAccountTokenProgramA extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTaker extends string,
  TAccountMaker extends string,
  TAccountTokenMintA extends string,
  TAccountTokenMintB extends string,
  TAccountOffer extends string,
  TAccountTakerTokenAccountA extends string,
  TAccountTakerTokenAccountB extends string,
  TAccountVault extends string,
  TAccountMakerTokenAccountB extends string,
  TProgramAddress extends Address = typeof ESCROW_PROGRAM_ADDRESS,
>(
  input: TakeOfferInput<
    TAccountSystemProgram,
    TAccountTokenProgramB,
    TAccountTokenProgramA,
    TAccountAssociatedTokenProgram,
    TAccountTaker,
    TAccountMaker,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountOffer,
    TAccountTakerTokenAccountA,
    TAccountTakerTokenAccountB,
    TAccountVault,
    TAccountMakerTokenAccountB
  >,
  config?: { programAddress?: TProgramAddress }
): TakeOfferInstruction<
  TProgramAddress,
  TAccountSystemProgram,
  TAccountTokenProgramB,
  TAccountTokenProgramA,
  TAccountAssociatedTokenProgram,
  TAccountTaker,
  TAccountMaker,
  TAccountTokenMintA,
  TAccountTokenMintB,
  TAccountOffer,
  TAccountTakerTokenAccountA,
  TAccountTakerTokenAccountB,
  TAccountVault,
  TAccountMakerTokenAccountB
> {
  // Program address.
  const programAddress = config?.programAddress ?? ESCROW_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgramB: { value: input.tokenProgramB ?? null, isWritable: false },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    taker: { value: input.taker ?? null, isWritable: true },
    maker: { value: input.maker ?? null, isWritable: true },
    tokenMintA: { value: input.tokenMintA ?? null, isWritable: false },
    tokenMintB: { value: input.tokenMintB ?? null, isWritable: false },
    offer: { value: input.offer ?? null, isWritable: true },
    takerTokenAccountA: {
      value: input.takerTokenAccountA ?? null,
      isWritable: true,
    },
    takerTokenAccountB: {
      value: input.takerTokenAccountB ?? null,
      isWritable: true,
    },
    vault: { value: input.vault ?? null, isWritable: true },
    makerTokenAccountB: {
      value: input.makerTokenAccountB ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgramB),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.taker),
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.tokenMintA),
      getAccountMeta(accounts.tokenMintB),
      getAccountMeta(accounts.offer),
      getAccountMeta(accounts.takerTokenAccountA),
      getAccountMeta(accounts.takerTokenAccountB),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.makerTokenAccountB),
    ],
    programAddress,
    data: getTakeOfferInstructionDataEncoder().encode({}),
  } as TakeOfferInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountTokenProgramB,
    TAccountTokenProgramA,
    TAccountAssociatedTokenProgram,
    TAccountTaker,
    TAccountMaker,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountOffer,
    TAccountTakerTokenAccountA,
    TAccountTakerTokenAccountB,
    TAccountVault,
    TAccountMakerTokenAccountB
  >;

  return instruction;
}

export type ParsedTakeOfferInstruction<
  TProgram extends string = typeof ESCROW_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    systemProgram: TAccountMetas[0];
    tokenProgramB: TAccountMetas[1];
    tokenProgramA: TAccountMetas[2];
    associatedTokenProgram: TAccountMetas[3];
    taker: TAccountMetas[4];
    maker: TAccountMetas[5];
    tokenMintA: TAccountMetas[6];
    tokenMintB: TAccountMetas[7];
    offer: TAccountMetas[8];
    takerTokenAccountA: TAccountMetas[9];
    takerTokenAccountB: TAccountMetas[10];
    vault: TAccountMetas[11];
    makerTokenAccountB: TAccountMetas[12];
  };
  data: TakeOfferInstructionData;
};

export function parseTakeOfferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTakeOfferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      systemProgram: getNextAccount(),
      tokenProgramB: getNextAccount(),
      tokenProgramA: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      taker: getNextAccount(),
      maker: getNextAccount(),
      tokenMintA: getNextAccount(),
      tokenMintB: getNextAccount(),
      offer: getNextAccount(),
      takerTokenAccountA: getNextAccount(),
      takerTokenAccountB: getNextAccount(),
      vault: getNextAccount(),
      makerTokenAccountB: getNextAccount(),
    },
    data: getTakeOfferInstructionDataDecoder().decode(instruction.data),
  };
}
